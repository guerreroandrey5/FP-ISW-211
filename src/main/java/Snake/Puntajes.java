/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Snake;


import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Cris
 */
public class Puntajes extends javax.swing.JFrame {
    /**
     * Creates new form Puntajes
     */
    public Puntajes() {
        initComponents();
         setLocationRelativeTo(null);
         setSize(830,420);
         
    }

    /*Funtion that read ('Puntuaje.txt') the scores of all players that have been playing*/
    public void setData() {
        ArrayList<String[]> lineas = new ArrayList<>(); //ArrayList that contains all the score on the txt File
        try {
        File archivo = new File("Puntajes.txt");
        String linea;
        Scanner lector = new Scanner(archivo);
        
            System.out.println(lineas.size());
        while ((linea = lector.nextLine())!= null) {
            lineas.add(linea.split(","));
        }
       
        } catch (Exception e) {
            
        }
        
        ArrayList<String[]> Mejores = new ArrayList<>(); //ArrayList that contains scores sort by points-time
        ArrayList<String[]> lineasCopia = new ArrayList<String[]>(lineas); //ArrayList that is a copy of the fist ArrayList of scores to avoid errors 
            while (true) {
            for (int i = 0; i < lineasCopia.size(); i++) {
                String[] lineaDato = lineasCopia.get(i);
                boolean mejor = mejoresTiempos(lineaDato, lineasCopia, i); //Call a function that compares a score with the other ones
                if (mejor) {
                    Mejores.add(lineaDato); //Adds the best score to the list
                    lineasCopia.remove(i); // deletes the best score from the copy
                }
            }
            if (lineasCopia.size() == 0) {
                break; //Breaks the while cicle just if the copy runs out of scores
            }
            }
            LlenarTablas(Mejores, lineas);
            
    }

    /*Fill the boths tables, one sort by date of game and the other one with the best*/
    public void LlenarTablas(ArrayList<String[]> tabla1, ArrayList<String[]> tabla2) {
               for (int i = 0; i < tabla1.size(); i++) { //A cicle to read the scores in the arrayList
                String[] data = tabla1.get(i);
                data[2] = convertTime(data[2]);
            DefaultTableModel modelo = (DefaultTableModel)RecordsTable.getModel(); //Gets the model of the table
            modelo.addRow(data);  //Add the score to a row
            }
            for (int i = 0; i < tabla2.size(); i++) { //The same as the other one but with the second table
                String[] data = tabla2.get(i);
            DefaultTableModel modelo2 = (DefaultTableModel)HistoryTable.getModel();
            modelo2.addRow(data); 
            }
            
    }

    /*Commpares a score with the other ones and retunr a boolean value*/
    public boolean mejoresTiempos(String[] dato1, ArrayList<String[]> Lista, int indice) {
        int cond = 0;
        int DatoP = Integer.parseInt(dato1[1]);
        int DatoT = Integer.parseInt(dato1[2]);
        for (int i = 0; i < Lista.size(); i++) {
            String[] puntuaje = Lista.get(i);
            int Puntos = Integer.parseInt(puntuaje[1]);
            int Tiempo = Integer.parseInt(puntuaje[2]);
            if (indice != i && Lista.size() != 1) {
                if (DatoP > Puntos) {
                } else if (DatoP == Puntos && DatoT <= Tiempo) {
                } else {
                    cond += 1;
                }
            }
        }
        
        if (cond != 0) {
            return false;
        } else {
            return true;
        }
    }
    
    /*Convert the time into readable time*/
    public String convertTime(String fecha) {
        int fechaInt = Integer.parseInt(fecha);
        int segundos = fechaInt / 1000;
        int contador = 0;
        String newTime = "";
        while (segundos > 60) {
            contador += 1;
            segundos = segundos - 60;
        }
        if (contador != 0) {
            newTime = String.valueOf(contador) + " minutos y " + String.valueOf(segundos) + " segundos";
        } else {
             newTime = String.valueOf(segundos) + " segundos";
        }
        
       return newTime; 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Records = new javax.swing.JPanel();
        LblRecords = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        RecordsTable = new javax.swing.JTable();
        History = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        HistoryTable = new javax.swing.JTable();
        LblHistory = new javax.swing.JLabel();
        BtnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tops e Historial de Snake");
        getContentPane().setLayout(null);

        LblRecords.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblRecords.setText("Mejores Tiempos");

        RecordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Puntuacion", "Tiempo", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RecordsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(RecordsTable);
        if (RecordsTable.getColumnModel().getColumnCount() > 0) {
            RecordsTable.getColumnModel().getColumn(0).setResizable(false);
            RecordsTable.getColumnModel().getColumn(1).setResizable(false);
            RecordsTable.getColumnModel().getColumn(2).setResizable(false);
            RecordsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout RecordsLayout = new javax.swing.GroupLayout(Records);
        Records.setLayout(RecordsLayout);
        RecordsLayout.setHorizontalGroup(
            RecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RecordsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(LblRecords, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                .addContainerGap())
        );
        RecordsLayout.setVerticalGroup(
            RecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RecordsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LblRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(Records);
        Records.setBounds(496, 10, 320, 360);

        HistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Puntuacion", "Tiempo", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        setData();
        HistoryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(HistoryTable);
        if (HistoryTable.getColumnModel().getColumnCount() > 0) {
            HistoryTable.getColumnModel().getColumn(0).setResizable(false);
            HistoryTable.getColumnModel().getColumn(1).setResizable(false);
            HistoryTable.getColumnModel().getColumn(2).setResizable(false);
            HistoryTable.getColumnModel().getColumn(3).setResizable(false);
        }

        LblHistory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblHistory.setText("Todo");

        javax.swing.GroupLayout HistoryLayout = new javax.swing.GroupLayout(History);
        History.setLayout(HistoryLayout);
        HistoryLayout.setHorizontalGroup(
            HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(LblHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        HistoryLayout.setVerticalGroup(
            HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HistoryLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(LblHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        getContentPane().add(History);
        History.setBounds(6, 0, 490, 300);

        BtnExit.setText("Volver");
        BtnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnExitActionPerformed(evt);
            }
        });
        getContentPane().add(BtnExit);
        BtnExit.setBounds(50, 320, 105, 49);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BtnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnExitActionPerformed
        Menu volver = new Menu();
        volver.setVisible(true);
        dispose();
    }//GEN-LAST:event_BtnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Puntajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Puntajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Puntajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Puntajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Puntajes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnExit;
    private javax.swing.JPanel History;
    private javax.swing.JTable HistoryTable;
    private javax.swing.JLabel LblHistory;
    private javax.swing.JLabel LblRecords;
    private javax.swing.JPanel Records;
    private javax.swing.JTable RecordsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
